// Code generated by ent, DO NOT EDIT.

package authz

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/itsabgr/authz/db/model/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Authz {
	return predicate.Authz(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Authz {
	return predicate.Authz(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Authz {
	return predicate.Authz(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Authz {
	return predicate.Authz(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Authz {
	return predicate.Authz(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Authz {
	return predicate.Authz(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Authz {
	return predicate.Authz(sql.FieldLTE(FieldID, id))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldUser, v))
}

// Relation applies equality check predicate on the "relation" field. It's identical to RelationEQ.
func Relation(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldRelation, v))
}

// Entity applies equality check predicate on the "entity" field. It's identical to EntityEQ.
func Entity(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldEntity, v))
}

// ExpireAt applies equality check predicate on the "expire_at" field. It's identical to ExpireAtEQ.
func ExpireAt(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldExpireAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldCreatedAt, v))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.Authz {
	return predicate.Authz(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.Authz {
	return predicate.Authz(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.Authz {
	return predicate.Authz(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.Authz {
	return predicate.Authz(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.Authz {
	return predicate.Authz(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.Authz {
	return predicate.Authz(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.Authz {
	return predicate.Authz(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.Authz {
	return predicate.Authz(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.Authz {
	return predicate.Authz(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.Authz {
	return predicate.Authz(sql.FieldHasSuffix(FieldUser, v))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.Authz {
	return predicate.Authz(sql.FieldContainsFold(FieldUser, v))
}

// RelationEQ applies the EQ predicate on the "relation" field.
func RelationEQ(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldRelation, v))
}

// RelationNEQ applies the NEQ predicate on the "relation" field.
func RelationNEQ(v string) predicate.Authz {
	return predicate.Authz(sql.FieldNEQ(FieldRelation, v))
}

// RelationIn applies the In predicate on the "relation" field.
func RelationIn(vs ...string) predicate.Authz {
	return predicate.Authz(sql.FieldIn(FieldRelation, vs...))
}

// RelationNotIn applies the NotIn predicate on the "relation" field.
func RelationNotIn(vs ...string) predicate.Authz {
	return predicate.Authz(sql.FieldNotIn(FieldRelation, vs...))
}

// RelationGT applies the GT predicate on the "relation" field.
func RelationGT(v string) predicate.Authz {
	return predicate.Authz(sql.FieldGT(FieldRelation, v))
}

// RelationGTE applies the GTE predicate on the "relation" field.
func RelationGTE(v string) predicate.Authz {
	return predicate.Authz(sql.FieldGTE(FieldRelation, v))
}

// RelationLT applies the LT predicate on the "relation" field.
func RelationLT(v string) predicate.Authz {
	return predicate.Authz(sql.FieldLT(FieldRelation, v))
}

// RelationLTE applies the LTE predicate on the "relation" field.
func RelationLTE(v string) predicate.Authz {
	return predicate.Authz(sql.FieldLTE(FieldRelation, v))
}

// RelationContains applies the Contains predicate on the "relation" field.
func RelationContains(v string) predicate.Authz {
	return predicate.Authz(sql.FieldContains(FieldRelation, v))
}

// RelationHasPrefix applies the HasPrefix predicate on the "relation" field.
func RelationHasPrefix(v string) predicate.Authz {
	return predicate.Authz(sql.FieldHasPrefix(FieldRelation, v))
}

// RelationHasSuffix applies the HasSuffix predicate on the "relation" field.
func RelationHasSuffix(v string) predicate.Authz {
	return predicate.Authz(sql.FieldHasSuffix(FieldRelation, v))
}

// RelationEqualFold applies the EqualFold predicate on the "relation" field.
func RelationEqualFold(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEqualFold(FieldRelation, v))
}

// RelationContainsFold applies the ContainsFold predicate on the "relation" field.
func RelationContainsFold(v string) predicate.Authz {
	return predicate.Authz(sql.FieldContainsFold(FieldRelation, v))
}

// EntityEQ applies the EQ predicate on the "entity" field.
func EntityEQ(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldEntity, v))
}

// EntityNEQ applies the NEQ predicate on the "entity" field.
func EntityNEQ(v string) predicate.Authz {
	return predicate.Authz(sql.FieldNEQ(FieldEntity, v))
}

// EntityIn applies the In predicate on the "entity" field.
func EntityIn(vs ...string) predicate.Authz {
	return predicate.Authz(sql.FieldIn(FieldEntity, vs...))
}

// EntityNotIn applies the NotIn predicate on the "entity" field.
func EntityNotIn(vs ...string) predicate.Authz {
	return predicate.Authz(sql.FieldNotIn(FieldEntity, vs...))
}

// EntityGT applies the GT predicate on the "entity" field.
func EntityGT(v string) predicate.Authz {
	return predicate.Authz(sql.FieldGT(FieldEntity, v))
}

// EntityGTE applies the GTE predicate on the "entity" field.
func EntityGTE(v string) predicate.Authz {
	return predicate.Authz(sql.FieldGTE(FieldEntity, v))
}

// EntityLT applies the LT predicate on the "entity" field.
func EntityLT(v string) predicate.Authz {
	return predicate.Authz(sql.FieldLT(FieldEntity, v))
}

// EntityLTE applies the LTE predicate on the "entity" field.
func EntityLTE(v string) predicate.Authz {
	return predicate.Authz(sql.FieldLTE(FieldEntity, v))
}

// EntityContains applies the Contains predicate on the "entity" field.
func EntityContains(v string) predicate.Authz {
	return predicate.Authz(sql.FieldContains(FieldEntity, v))
}

// EntityHasPrefix applies the HasPrefix predicate on the "entity" field.
func EntityHasPrefix(v string) predicate.Authz {
	return predicate.Authz(sql.FieldHasPrefix(FieldEntity, v))
}

// EntityHasSuffix applies the HasSuffix predicate on the "entity" field.
func EntityHasSuffix(v string) predicate.Authz {
	return predicate.Authz(sql.FieldHasSuffix(FieldEntity, v))
}

// EntityEqualFold applies the EqualFold predicate on the "entity" field.
func EntityEqualFold(v string) predicate.Authz {
	return predicate.Authz(sql.FieldEqualFold(FieldEntity, v))
}

// EntityContainsFold applies the ContainsFold predicate on the "entity" field.
func EntityContainsFold(v string) predicate.Authz {
	return predicate.Authz(sql.FieldContainsFold(FieldEntity, v))
}

// ExpireAtEQ applies the EQ predicate on the "expire_at" field.
func ExpireAtEQ(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldExpireAt, v))
}

// ExpireAtNEQ applies the NEQ predicate on the "expire_at" field.
func ExpireAtNEQ(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldNEQ(FieldExpireAt, v))
}

// ExpireAtIn applies the In predicate on the "expire_at" field.
func ExpireAtIn(vs ...time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldIn(FieldExpireAt, vs...))
}

// ExpireAtNotIn applies the NotIn predicate on the "expire_at" field.
func ExpireAtNotIn(vs ...time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldNotIn(FieldExpireAt, vs...))
}

// ExpireAtGT applies the GT predicate on the "expire_at" field.
func ExpireAtGT(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldGT(FieldExpireAt, v))
}

// ExpireAtGTE applies the GTE predicate on the "expire_at" field.
func ExpireAtGTE(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldGTE(FieldExpireAt, v))
}

// ExpireAtLT applies the LT predicate on the "expire_at" field.
func ExpireAtLT(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldLT(FieldExpireAt, v))
}

// ExpireAtLTE applies the LTE predicate on the "expire_at" field.
func ExpireAtLTE(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldLTE(FieldExpireAt, v))
}

// ExpireAtIsNil applies the IsNil predicate on the "expire_at" field.
func ExpireAtIsNil() predicate.Authz {
	return predicate.Authz(sql.FieldIsNull(FieldExpireAt))
}

// ExpireAtNotNil applies the NotNil predicate on the "expire_at" field.
func ExpireAtNotNil() predicate.Authz {
	return predicate.Authz(sql.FieldNotNull(FieldExpireAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Authz {
	return predicate.Authz(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Authz) predicate.Authz {
	return predicate.Authz(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Authz) predicate.Authz {
	return predicate.Authz(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Authz) predicate.Authz {
	return predicate.Authz(sql.NotPredicates(p))
}
