// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/itsabgr/authz/db/model/authz"
	"github.com/itsabgr/authz/db/model/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuthz = "Authz"
)

// AuthzMutation represents an operation that mutates the Authz nodes in the graph.
type AuthzMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user          *string
	relation      *string
	entity        *string
	expire_at     *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Authz, error)
	predicates    []predicate.Authz
}

var _ ent.Mutation = (*AuthzMutation)(nil)

// authzOption allows management of the mutation configuration using functional options.
type authzOption func(*AuthzMutation)

// newAuthzMutation creates new mutation for the Authz entity.
func newAuthzMutation(c config, op Op, opts ...authzOption) *AuthzMutation {
	m := &AuthzMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthz,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthzID sets the ID field of the mutation.
func withAuthzID(id int) authzOption {
	return func(m *AuthzMutation) {
		var (
			err   error
			once  sync.Once
			value *Authz
		)
		m.oldValue = func(ctx context.Context) (*Authz, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Authz.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthz sets the old Authz of the mutation.
func withAuthz(node *Authz) authzOption {
	return func(m *AuthzMutation) {
		m.oldValue = func(context.Context) (*Authz, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthzMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthzMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthzMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthzMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Authz.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUser sets the "user" field.
func (m *AuthzMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *AuthzMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the Authz entity.
// If the Authz object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthzMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *AuthzMutation) ResetUser() {
	m.user = nil
}

// SetRelation sets the "relation" field.
func (m *AuthzMutation) SetRelation(s string) {
	m.relation = &s
}

// Relation returns the value of the "relation" field in the mutation.
func (m *AuthzMutation) Relation() (r string, exists bool) {
	v := m.relation
	if v == nil {
		return
	}
	return *v, true
}

// OldRelation returns the old "relation" field's value of the Authz entity.
// If the Authz object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthzMutation) OldRelation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelation: %w", err)
	}
	return oldValue.Relation, nil
}

// ResetRelation resets all changes to the "relation" field.
func (m *AuthzMutation) ResetRelation() {
	m.relation = nil
}

// SetEntity sets the "entity" field.
func (m *AuthzMutation) SetEntity(s string) {
	m.entity = &s
}

// Entity returns the value of the "entity" field in the mutation.
func (m *AuthzMutation) Entity() (r string, exists bool) {
	v := m.entity
	if v == nil {
		return
	}
	return *v, true
}

// OldEntity returns the old "entity" field's value of the Authz entity.
// If the Authz object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthzMutation) OldEntity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntity: %w", err)
	}
	return oldValue.Entity, nil
}

// ResetEntity resets all changes to the "entity" field.
func (m *AuthzMutation) ResetEntity() {
	m.entity = nil
}

// SetExpireAt sets the "expire_at" field.
func (m *AuthzMutation) SetExpireAt(t time.Time) {
	m.expire_at = &t
}

// ExpireAt returns the value of the "expire_at" field in the mutation.
func (m *AuthzMutation) ExpireAt() (r time.Time, exists bool) {
	v := m.expire_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireAt returns the old "expire_at" field's value of the Authz entity.
// If the Authz object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthzMutation) OldExpireAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireAt: %w", err)
	}
	return oldValue.ExpireAt, nil
}

// ClearExpireAt clears the value of the "expire_at" field.
func (m *AuthzMutation) ClearExpireAt() {
	m.expire_at = nil
	m.clearedFields[authz.FieldExpireAt] = struct{}{}
}

// ExpireAtCleared returns if the "expire_at" field was cleared in this mutation.
func (m *AuthzMutation) ExpireAtCleared() bool {
	_, ok := m.clearedFields[authz.FieldExpireAt]
	return ok
}

// ResetExpireAt resets all changes to the "expire_at" field.
func (m *AuthzMutation) ResetExpireAt() {
	m.expire_at = nil
	delete(m.clearedFields, authz.FieldExpireAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *AuthzMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuthzMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Authz entity.
// If the Authz object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthzMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuthzMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the AuthzMutation builder.
func (m *AuthzMutation) Where(ps ...predicate.Authz) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthzMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthzMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Authz, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthzMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthzMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Authz).
func (m *AuthzMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthzMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.user != nil {
		fields = append(fields, authz.FieldUser)
	}
	if m.relation != nil {
		fields = append(fields, authz.FieldRelation)
	}
	if m.entity != nil {
		fields = append(fields, authz.FieldEntity)
	}
	if m.expire_at != nil {
		fields = append(fields, authz.FieldExpireAt)
	}
	if m.created_at != nil {
		fields = append(fields, authz.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthzMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authz.FieldUser:
		return m.User()
	case authz.FieldRelation:
		return m.Relation()
	case authz.FieldEntity:
		return m.Entity()
	case authz.FieldExpireAt:
		return m.ExpireAt()
	case authz.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthzMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authz.FieldUser:
		return m.OldUser(ctx)
	case authz.FieldRelation:
		return m.OldRelation(ctx)
	case authz.FieldEntity:
		return m.OldEntity(ctx)
	case authz.FieldExpireAt:
		return m.OldExpireAt(ctx)
	case authz.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Authz field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthzMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authz.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case authz.FieldRelation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelation(v)
		return nil
	case authz.FieldEntity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntity(v)
		return nil
	case authz.FieldExpireAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireAt(v)
		return nil
	case authz.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Authz field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthzMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthzMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthzMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Authz numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthzMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(authz.FieldExpireAt) {
		fields = append(fields, authz.FieldExpireAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthzMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthzMutation) ClearField(name string) error {
	switch name {
	case authz.FieldExpireAt:
		m.ClearExpireAt()
		return nil
	}
	return fmt.Errorf("unknown Authz nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthzMutation) ResetField(name string) error {
	switch name {
	case authz.FieldUser:
		m.ResetUser()
		return nil
	case authz.FieldRelation:
		m.ResetRelation()
		return nil
	case authz.FieldEntity:
		m.ResetEntity()
		return nil
	case authz.FieldExpireAt:
		m.ResetExpireAt()
		return nil
	case authz.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Authz field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthzMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthzMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthzMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthzMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthzMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthzMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthzMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Authz unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthzMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Authz edge %s", name)
}
